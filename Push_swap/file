Ok now is it possible to make the code more efficiente so it follows this rules:
Push_swap - Simple version

If the following tests fails, no points will be awarded for this
section. Move to the next one. Use the checker binary given on the
attachments.

    Run "$>ARG="2 1 0"; ./push_swap $ARG | ./checker_OS $ARG".
    Check that the checker program displays "OK" and that the
    size of the list of instructions from push_swap is 2 OR 3.
    Otherwise the test fails.

    Run "$>ARG="'Between 0 and 3 randomly values chosen'"; ./push_swap
    $ARG | ./checker_OS $ARG". Check that the checker program displays
    "OK" and that the size of the list of instructions from push_swap
    is between 0 AND 3. Otherwise the test fails.


AND

Another simple version

Execute the following 2 tests. If at least one fails, no points
will be awarded for this section. Move to the next one. Use the checker
binary given on the attachments.

    Run "$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker_OS $ARG".
    Check that the checker program displays "OK" and that the
    size of the list of instructions from push_swap isn't more
    than 12. Kudos if the size of the list of instructions is 8.

    Run "$>ARG="<5 random values>"; ./push_swap $ARG | ./checker_OS
    $ARG" and replace the placeholder by 5 random valid values.
    Check that the checker program displays "OK" and that the
    size of the list of instructions from push_swap isn't more
    than 12. Otherwise this test fails. You'll have to
    specifically check that the program wasn't developed to only
    answer correctly on the test included in this scale. You
    should repeat this test couple of times with several
    permutations before you validate it.

